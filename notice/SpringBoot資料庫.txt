
使用資料庫
-------------------------------

1:先準備好一個資料庫 (例如xampp的資料庫。這裡以myschema為例，並使用mytablefirst)

2:修改pom.xml
找到<dependencies>...</dependencies>並加入以下代碼
<!-- For DataBase connection -->
    	<dependency>
    		<groupId>mysql</groupId>
    		<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		
		<!-- For DataBase connection -->
    	<dependency>
    		<groupId>org.springframework.boot</groupId>
    		<artifactId>spring-boot-starter-jdbc</artifactId>
		</dependency>

3:修改Java Resources/src/main/resources/application.properties
加入以下指令
# For MySQL connection
spring.datasource.url=jdbc:mysql://localhost:3306/myschema?serverTimezone=UTC&useSSL=false
spring.datasource.username=JDBCUser
spring.datasource.password=JDBCUser
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
server.servlet.encoding.force=true

4:在src/main/java建立一個新的package(例如com.example.model)，並建立model(例如DatabaseModel.java)
加入以下指令
package com.example.model;

import org.springframework.stereotype.Component;

@Component
/*建立資料庫的存取方法*/

public class DatabaseModel {
	
	private int CommonIndex;
	private String FirstName;
	private int FirstValue;
	  
	public int getId() {
		return CommonIndex;
	}
	public void setId(int id) {
		this.CommonIndex = id;
	}
	public String getName() {
		return FirstName;
	}
	public void setName(String name) {
		this.FirstName = name;
	}
	public int getValue() {
		return FirstValue;
	}
	public void setValue(int value) {
		this.FirstValue = value;
	} 
}

5:在src/main/java建立一個新的package(例如com.example.repository)，並建立repository(例如DatabaseRepository.java)
加入以下指令
package com.example.repository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import com.example.model.DatabaseModel;

@Repository
public class DatabaseRepository {
	@Autowired
	private JdbcTemplate jdbcTemplate;
	public void insertData(DatabaseModel databaseModel){
		jdbcTemplate.update("INSERT INTO mytablefirst(CommonIndex, FirstName, FirstValue)"
		+"VALUES (?,?,?)",databaseModel.getId(), databaseModel.getName(),databaseModel.getValue());
	}
	/*編寫SQL語法，建立各種CRUD的指令*/
}

6:在src/main/java建立一個新的package(例如com.example.service)，並建立service(例如DatabaseService.java)
加入以下指令
package com.example.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.model.DatabaseModel;/*引入前面建立的model*/
import com.example.repository.DatabaseRepository;/*引入前面建立的repository*/

@Service
public class DatabaseService {
	@Autowired
	DatabaseRepository databaseRepository;
	public void addData(DatabaseModel databaseModel){
		databaseRepository.insertData(databaseModel);
	}
	/*執行SQL語法*/
}

7:在src/main/java建立一個新的package(例如com.example.controller)，並建立controller(例如DatabaseController.java)
加入以下指令
package com.example.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.model.DatabaseModel;/*引入前面建立的model*/
import com.example.service.DatabaseService;/*引入前面建立的service*/

@RestController
public class DatabaseController {
	@Autowired
	DatabaseModel databaseModel;
	@Autowired
	DatabaseService databaseService;
	@RequestMapping("/ExecuteAddData")/*專案要執行下面方法時所對應的路徑*/
	public String excute(){
    	databaseModel = new DatabaseModel();
    	databaseModel.setId(6);
    	databaseModel.setName("SpringBoot");
    	databaseModel.setValue(666);
    	databaseService.addData(databaseModel);
        return "Data added";
    }
}
8:修改Java Resources/src/main/java/com.example.demo/"專案名稱"+Application.java
加入以下指令
package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

/*資料庫使用*/
import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.context.annotation.ComponentScan;

@SpringBootApplication
@ComponentScan({"com.example.demo","com.example.model","com.example.controller","com.example.service","com.example.repository"})
@EntityScan({"com.example.demo","com.example.model","com.example.controller","com.example.service","com.example.repository"})

public class SpringBootDatabaseApplication extends SpringBootServletInitializer {

	public static void main(String[] args) {
		SpringApplication.run(SpringBootDatabaseApplication.class, args);
	}

}

9:Run As->Spring Boot App->到網址列輸入http://localhost:8080/ExecuteAddData